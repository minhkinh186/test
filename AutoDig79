getgenv().autoDigsiteConfig = {
    ACCOUNT_POSITIONS = 1,
    DIG_DEPTH = 5, -- How deep to dig in each position
    BLOCK_BREAK_DELAY = 0.1, -- Amount of time in seconds to wait before breaking a block
    CHEST_BREAK_DELAY = 0.1, -- Amount of time in seconds to wait before breaking a chest

    ANTI_AFK = flase,
    OPTIMIZE_GAME = false, -- Optimize the game by removing unnecessary parts
    DIGSITE_RESET_DELAY = 15, -- Amount of time in seconds to wait before starting the script back up after the digsite resets
    LOAD_DELAY = 5, -- How long to wait afterr loading in before starting the script
}

local digsiteReset = false
local positions

if getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 1 then
    positions = {
        [1] = Vector3.new(16, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
--[[
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 2 then
    positions = {
        [1] = Vector3.new(16, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 3 then
    positions = {
        [1] = Vector3.new(16, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 4 then
    positions = {
        [1] = Vector3.new(16, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 5 then
    positions = {
        [1] = Vector3.new(16, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 6 then
    positions = {
        [1] = Vector3.new(16, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 7 then
    positions = {
        [1] = Vector3.new(15, 1, 7),
        [2] = Vector3.new(1, 1, 7),
        [3] = Vector3.new(2, 1, 7),
        [4] = Vector3.new(3, 1, 7),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 8 then
    positions = {
        [1] = Vector3.new(15, 1, 6),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 9 then
    positions = {
        [1] = Vector3.new(15, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 10 then
    positions = {
        [1] = Vector3.new(15, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 11 then
    positions = {
        [1] = Vector3.new(15, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 12 then
    positions = {
        [1] = Vector3.new(15, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 13 then
    positions = {
        [1] = Vector3.new(15, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 14 then
    positions = {
        [1] = Vector3.new(15, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 15 then
    positions = {
        [1] = Vector3.new(14, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 16 then
    positions = {
        [1] = Vector3.new(14, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 17 then
    positions = {
        [1] = Vector3.new(14, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 18 then
    positions = {
        [1] = Vector3.new(14, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 19 then
    positions = {
        [1] = Vector3.new(14, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 20 then
    positions = {
        [1] = Vector3.new(14, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 21 then
    positions = {
        [1] = Vector3.new(13, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 22 then
    positions = {
        [1] = Vector3.new(13, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 23 then
    positions = {
        [1] = Vector3.new(13, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 24 then
    positions = {
        [1] = Vector3.new(13, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 25 then
    positions = {
        [1] = Vector3.new(13, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 26 then
    positions = {
        [1] = Vector3.new(13, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 27 then
    positions = {
        [1] = Vector3.new(12, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 28 then
    positions = {
        [1] = Vector3.new(12, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 29 then
    positions = {
        [1] = Vector3.new(12, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 30 then
    positions = {
        [1] = Vector3.new(12, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 31 then
    positions = {
        [1] = Vector3.new(12, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 32 then
    positions = {
        [1] = Vector3.new(12, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 33 then
    positions = {
        [1] = Vector3.new(11, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 34 then
    positions = {
        [1] = Vector3.new(11, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 35 then
    positions = {
        [1] = Vector3.new(11, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 36 then
    positions = {
        [1] = Vector3.new(11, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 37 then
    positions = {
        [1] = Vector3.new(11, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 38 then
    positions = {
        [1] = Vector3.new(11, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 39 then
    positions = {
        [1] = Vector3.new(10, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 40 then
    positions = {
        [1] = Vector3.new(10, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 41 then
    positions = {
        [1] = Vector3.new(10, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 42 then
    positions = {
        [1] = Vector3.new(10, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 43 then
    positions = {
        [1] = Vector3.new(10, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 44 then
    positions = {
        [1] = Vector3.new(10, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 45 then
    positions = {
        [1] = Vector3.new(9, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 46 then
    positions = {
        [1] = Vector3.new(9, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 47 then
    positions = {
        [1] = Vector3.new(9, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 48 then
    positions = {
        [1] = Vector3.new(9, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),

    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 49 then
    positions = {
        [1] = Vector3.new(9, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 50 then
    positions = {
        [1] = Vector3.new(9, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 51 then
    positions = {
        [1] = Vector3.new(8, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 52 then
    positions = {
        [1] = Vector3.new(8, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 53 then
    positions = {
        [1] = Vector3.new(8, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 54 then
    positions = {
        [1] = Vector3.new(8, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 55 then
    positions = {
        [1] = Vector3.new(8, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 56 then
    positions = {
        [1] = Vector3.new(8, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 57 then
    positions = {
        [1] = Vector3.new(7, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 58 then
    positions = {
        [1] = Vector3.new(7, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 59 then
    positions = {
        [1] = Vector3.new(7, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 60 then
    positions = {
        [1] = Vector3.new(7, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 61 then
    positions = {
        [1] = Vector3.new(7, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 62 then
    positions = {
        [1] = Vector3.new(7, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 63 then
    positions = {
        [1] = Vector3.new(6, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 64 then
    positions = {
        [1] = Vector3.new(6, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 65 then
    positions = {
        [1] = Vector3.new(6, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 66 then
    positions = {
        [1] = Vector3.new(6, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 67 then
    positions = {
        [1] = Vector3.new(6, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 68 then
    positions = {
        [1] = Vector3.new(6, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 69 then
    positions = {
        [1] = Vector3.new(5, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 70 then
    positions = {
        [1] = Vector3.new(5, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 71 then
    positions = {
        [1] = Vector3.new(5, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 72 then
    positions = {
        [1] = Vector3.new(5, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 73 then
    positions = {
        [1] = Vector3.new(5, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 74 then
    positions = {
        [1] = Vector3.new(5, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 75 then
    positions = {
        [1] = Vector3.new(4, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 76 then
    positions = {
        [1] = Vector3.new(4, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 77 then
    positions = {
        [1] = Vector3.new(4, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 78 then
    positions = {
        [1] = Vector3.new(4, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 79 then
    positions = {
        [1] = Vector3.new(4, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 80 then
    positions = {
        [1] = Vector3.new(4, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 81 then
    positions = {
        [1] = Vector3.new(3, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 82 then
    positions = {
        [1] = Vector3.new(3, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 83 then
    positions = {
        [1] = Vector3.new(3, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 84 then
    positions = {
        [1] = Vector3.new(3, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 85 then
    positions = {
        [1] = Vector3.new(3, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 86 then
    positions = {
        [1] = Vector3.new(3, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 87 then
    positions = {
        [1] = Vector3.new(2, 1, 1),
        [2] = Vector3.new(1, 1, 1),
        [3] = Vector3.new(2, 1, 1),
        [4] = Vector3.new(3, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 88 then
    positions = {
        [1] = Vector3.new(2, 1, 4),
        [2] = Vector3.new(1, 1, 2),
        [3] = Vector3.new(2, 1, 2),
        [4] = Vector3.new(3, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 89 then
    positions = {
        [1] = Vector3.new(2, 1, 7),
        [2] = Vector3.new(1, 1, 3),
        [3] = Vector3.new(2, 1, 3),
        [4] = Vector3.new(3, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 90 then
    positions = {
        [1] = Vector3.new(2, 1, 10),
        [2] = Vector3.new(1, 1, 4),
        [3] = Vector3.new(2, 1, 4),
        [4] = Vector3.new(3, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 91 then
    positions = {
        [1] = Vector3.new(2, 1, 13),
        [2] = Vector3.new(1, 1, 5),
        [3] = Vector3.new(2, 1, 5),
        [4] = Vector3.new(3, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 92 then
    positions = {
        [1] = Vector3.new(2, 1, 16),
        [2] = Vector3.new(1, 1, 6),
        [3] = Vector3.new(2, 1, 6),
        [4] = Vector3.new(3, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 93 then
    positions = {
        [1] = Vector3.new(1, 1, 1),
        [2] = Vector3.new(2, 1, 1),
        [3] = Vector3.new(3, 1, 1),
        [4] = Vector3.new(4, 1, 1),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 94 then
    positions = {
        [1] = Vector3.new(1, 1, 4),
        [2] = Vector3.new(2, 1, 2),
        [3] = Vector3.new(3, 1, 2),
        [4] = Vector3.new(4, 1, 2),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 95 then
    positions = {
        [1] = Vector3.new(1, 1, 7),
        [2] = Vector3.new(2, 1, 3),
        [3] = Vector3.new(3, 1, 3),
        [4] = Vector3.new(4, 1, 3),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 96 then
    positions = {
        [1] = Vector3.new(1, 1, 10),
        [2] = Vector3.new(2, 1, 4),
        [3] = Vector3.new(3, 1, 4),
        [4] = Vector3.new(4, 1, 4),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 97 then
    positions = {
        [1] = Vector3.new(1, 1, 13),
        [2] = Vector3.new(2, 1, 5),
        [3] = Vector3.new(3, 1, 5),
        [4] = Vector3.new(4, 1, 5),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 98 then
    positions = {
        [1] = Vector3.new(1, 1, 16),
        [2] = Vector3.new(2, 1, 6),
        [3] = Vector3.new(3, 1, 6),
        [4] = Vector3.new(4, 1, 6),
    }
elseif getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS == 99 then
    positions = {
        [1] = Vector3.new(14, 1, 3),
        [2] = Vector3.new(14, 1, 9),
        [3] = Vector3.new(14, 1, 14),
        [4] = Vector3.new(8, 1, 3),
        [5] = Vector3.new(8, 1, 9),
        [6] = Vector3.new(8, 1, 14),
        [7] = Vector3.new(3, 1, 3),
        [8] = Vector3.new(3, 1, 9),
        [9] = Vector3.new(3, 1, 14)
    }
--]]
end

local function checkForChests()
    for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveChests:GetChildren()) do
        if v:IsA("Model") then
            pcall(function()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Top.CFrame
                task.wait(getgenv().autoDigsiteConfig.CHEST_BREAK_DELAY)
                game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigChest", v:GetAttribute('Coord'))
                task.wait()
                v:Destroy()
            end)
        end
        if digsiteReset then
            print("Digsite reset while breaking chests, breaking out of loop")
            return
        end
    end
end




local function dig()
    digsiteReset = false
    print("Starting digging")
    -- repeat through all positions
    for curPos, _ in positions do

        -- GETS TOP-MOST BLOCK FROM POSITION
        local blockDepth = 0
        local foundBlock = false
        -- checking 60 blocks deep below point
        for a = 0, getgenv().autoDigsiteConfig.DIG_DEPTH do
            for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
                if v:IsA("Part") then
                    -- if block is at the current position
                    if (v:GetAttribute("Coord") == (positions[curPos] + Vector3.new(0, a, 0))) then
                        blockDepth = a
                        foundBlock = true
                        break
                    end
                end
            end
            if foundBlock then
                break
            end
        end

        -- If found block in position, begin digging down
        if foundBlock then

            -- FIND BLOCK TO DIG
            local currentBlock
            -- check all blocks in current digsite for block deepest at current position
            for _, block in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
                if block:IsA("Part") then
                    -- if block is correct block
                    if (block:GetAttribute("Coord") == (positions[curPos] + Vector3.new(0, blockDepth, 0))) then
                        -- set current block to block
                        currentBlock = block
                        break
                    end
                end
            end

            for d = blockDepth, getgenv().autoDigsiteConfig.DIG_DEPTH do
                checkForChests()

                -- check if block is breakable, if not, skip
                if tostring(currentBlock.BrickColor) ~= "Really black" and not currentBlock:FindFirstChild("Firefly") then

                    -- teleport to block
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentBlock.CFrame + Vector3.new(0, 3, 0)

                    -- while the block is there, break it
                    while currentBlock:FindFirstChild("Texture") do
                        game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigBlock", currentBlock:GetAttribute('Coord'))
                        task.wait(getgenv().autoDigsiteConfig.BLOCK_BREAK_DELAY)
                    end
                end

                if digsiteReset then
                    print("Digsite reset while digging positions, breaking out of loop")
                    task.wait(5)
                    return
                end

                -- set current block to new block
                local foundNewBlock = false
                for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
                    if v:IsA("BasePart") then
                        if v:GetAttribute("Coord") == (positions[curPos] + Vector3.new(0, d + 1, 0)) then
                            currentBlock = v
                            foundNewBlock = true
                            break
                        end
                    end
                end

                if not foundNewBlock then
                    d = d + 1
                end

                task.wait()
            end
        end
    end

    print("Finished digging in all positions, digging until site reset")

    -- while digsite is not reset
    local checkedBlocks = {}
    while true do
        -- get random blocks and break them
        for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren()) do
            -- double checking within block
            if not digsiteReset then
                -- if below specified depth
                if tonumber(v:GetAttribute("Coord").Y) > ((getgenv().autoDigsiteConfig.DIG_DEPTH / 3) * 2) then
                    checkForChests()

                    if v:IsA("Part") and tostring(v.BrickColor) ~= "Really black" and not v:FindFirstChild("Firefly") then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 3, 0)
                        task.wait()
                        while v:FindFirstChild("Texture") do
                            game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("AdvancedDigsite", "DigBlock", v:GetAttribute('Coord'))
                            task.wait(getgenv().autoDigsiteConfig.BLOCK_BREAK_DELAY)
                        end
                    end
                else
                    table.insert(checkedBlocks, v)
                end
            else
                print("Digsite reset while digging, breaking out of loop")
                task.wait(10)
                return
            end
        end
        task.wait()
    end
end

print("Starting Script")

-- ANTI AFK --
if getgenv().autoDigsiteConfig.ANTI_AFK then
    game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false

    if getconnections then
        for _, v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
            v:Disable()
        end
    else
        game.Players.LocalPlayer.Idled:Connect(function()
            game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
            task.wait(1)
            game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        end)
    end
end
-- ANTI AFK --


if getgenv().autoDigsiteConfig.OPTIMIZE_GAME then
    pcall(function()
        for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite"):GetChildren()) do
            pcall(function()
                if v.Name == "Ground" then
                    v.Transparency = 1
                elseif string.find(v.Name, "rock") or string.find(v.Name, "Sign") then
                    v:Destroy()
                elseif v.Name == "Important" then
                    v:FindFirstChild("Merchant"):Destroy()
                elseif v.Name == "Map" then
                    for _, v2 in pairs(v:GetChildren()) do
                        if v2:IsA("Model") or string.find(v2.Name, "Mesh") or string.find(v2.Name, "G7") then
                            v2:Destroy()
                        end
                    end
                end
            end)
        end

        for _, v in pairs(game.Players:GetChildren()) do
            for _, v2 in pairs(v.Character:GetDescendants()) do
                if v2:IsA("BasePart") or v2:IsA("Decal") then
                    v2.Transparency = 1
                end
            end
        end

        game.Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function(character)
                for _, v in pairs(character:GetDescendants()) do
                    if v:IsA("BasePart") or v:IsA("Decal") then
                        v.Transparency = 1
                    end
                end
            end)
        end)

        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("Part") or v:IsA("BasePart") then
                v.Transparency = 1
            end
        end

        for _,v in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
            if v:IsA("ScreenGui") then
                v.Enabled = false
            end
        end

        for _, v in pairs(game:GetService("StarterGui"):GetChildren()) do
            if v:IsA("ScreenGui") then
                v.Enabled = false
            end
        end

        -- for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
        --     if v:IsA("ScreenGui") then
        --         v.Enabled = false
        --     end
        -- end
    end)

    task.wait(5)
end

require(game:GetService("ReplicatedStorage").Library.Client.WorldFX).AnimateChest = function(...)
    return
end

game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
    task.wait()
    if lootbag then
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
    end
end)

game:GetService("Workspace").__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
    task.wait()
    if orb then
        game:GetService("ReplicatedStorage").Network:FindFirstChild("Orbs: Collect"):FireServer(unpack( { [1] = { [1] = tonumber(orb.Name), }, } ))
        orb:Destroy()
    end
end)

-- -- reset service
-- task.spawn(function()
--     task.wait(1)

--     while true do
--         -- CHECK IF DIGSITE RESET
--         local childRemoved = game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks.ChildRemoved:Connect(function()
--             if not digsiteReset and #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() < 256 then
--                 print("Digsite reset")
--                 digsiteReset = true
--             end
--         end)

--         while not digsiteReset do
--             task.wait(1)
--         end

--         childRemoved:Disconnect()

--         task.wait(1)
--         while #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() < 256 do
--             task.wait(1)
--         end

--         task.spawn(dig)

--         while #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() < 336 do
--             task.wait(1)
--         end
--         print("Blocks loaded")
--     end
-- end)



task.spawn(function()
    task.wait(getgenv().autoDigsiteConfig.LOAD_DELAY)
    while true do
        -- CHECK IF DIGSITE RESET
        while #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("AdvancedDigsite").Important.ActiveBlocks:GetChildren() ~= 256 do -- MAX WILL BE 336
            task.wait()
        end

        print("Digsite reset")
        digsiteReset = true
        task.wait(getgenv().autoDigsiteConfig.DIGSITE_RESET_DELAY)
        task.spawn(dig)
        task.wait(5)
    end
end)

print("Will dig in position configuration: " .. tostring(getgenv().autoDigsiteConfig.ACCOUNT_POSITIONS))
dig()
